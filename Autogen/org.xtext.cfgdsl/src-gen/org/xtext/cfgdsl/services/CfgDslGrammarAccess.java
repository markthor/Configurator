/*
* generated by Xtext
*/
package org.xtext.cfgdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CfgDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRootAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cConfiguratorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConfiguratorsConfigurationParserRuleCall_1_0 = (RuleCall)cConfiguratorsAssignment_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		
		//Root:
		//	{Root} configurators+=Configuration* expressions+=Expression*;
		public ParserRule getRule() { return rule; }

		//{Root} configurators+=Configuration* expressions+=Expression*
		public Group getGroup() { return cGroup; }

		//{Root}
		public Action getRootAction_0() { return cRootAction_0; }

		//configurators+=Configuration*
		public Assignment getConfiguratorsAssignment_1() { return cConfiguratorsAssignment_1; }

		//Configuration
		public RuleCall getConfiguratorsConfigurationParserRuleCall_1_0() { return cConfiguratorsConfigurationParserRuleCall_1_0; }

		//expressions+=Expression*
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_2_0() { return cExpressionsExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBinaryConstraintParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSetParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cUnaryConstraintParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expression:
		//	BinaryConstraint | Parameter | Set | StringValue | IntegerValue | BooleanValue | UnaryConstraint;
		public ParserRule getRule() { return rule; }

		//BinaryConstraint | Parameter | Set | StringValue | IntegerValue | BooleanValue | UnaryConstraint
		public Alternatives getAlternatives() { return cAlternatives; }

		//BinaryConstraint
		public RuleCall getBinaryConstraintParserRuleCall_0() { return cBinaryConstraintParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }

		//Set
		public RuleCall getSetParserRuleCall_2() { return cSetParserRuleCall_2; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_3() { return cStringValueParserRuleCall_3; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_4() { return cIntegerValueParserRuleCall_4; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_5() { return cBooleanValueParserRuleCall_5; }

		//UnaryConstraint
		public RuleCall getUnaryConstraintParserRuleCall_6() { return cUnaryConstraintParserRuleCall_6; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	StringValue | IntegerValue | BooleanValue;
		public ParserRule getRule() { return rule; }

		//StringValue | IntegerValue | BooleanValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_2() { return cBooleanValueParserRuleCall_2; }
	}

	public class ConfigurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Configuration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConfigurationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCfgKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAssignmentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_0_0 = (RuleCall)cAssignmentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAssignmentsAssignmentParserRuleCall_2_1_1_0 = (RuleCall)cAssignmentsAssignment_2_1_1.eContents().get(0);
		
		//Configuration:
		//	{Configuration} "cfg" (assignments+=Assignment ("," assignments+=Assignment)*)?;
		public ParserRule getRule() { return rule; }

		//{Configuration} "cfg" (assignments+=Assignment ("," assignments+=Assignment)*)?
		public Group getGroup() { return cGroup; }

		//{Configuration}
		public Action getConfigurationAction_0() { return cConfigurationAction_0; }

		//"cfg"
		public Keyword getCfgKeyword_1() { return cCfgKeyword_1; }

		//(assignments+=Assignment ("," assignments+=Assignment)*)?
		public Group getGroup_2() { return cGroup_2; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_2_0() { return cAssignmentsAssignment_2_0; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_0_0() { return cAssignmentsAssignmentParserRuleCall_2_0_0; }

		//("," assignments+=Assignment)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//assignments+=Assignment
		public Assignment getAssignmentsAssignment_2_1_1() { return cAssignmentsAssignment_2_1_1; }

		//Assignment
		public RuleCall getAssignmentsAssignmentParserRuleCall_2_1_1_0() { return cAssignmentsAssignmentParserRuleCall_2_1_1_0; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_1_0 = (CrossReference)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterParameterEStringParserRuleCall_1_0_1 = (RuleCall)cParameterParameterCrossReference_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cValueValueCrossReference_3_0 = (CrossReference)cValueAssignment_3.eContents().get(0);
		private final RuleCall cValueValueEStringParserRuleCall_3_0_1 = (RuleCall)cValueValueCrossReference_3_0.eContents().get(1);
		
		//Assignment:
		//	"assign" parameter=[Parameter|EString] "to" value=[Value|EString];
		public ParserRule getRule() { return rule; }

		//"assign" parameter=[Parameter|EString] "to" value=[Value|EString]
		public Group getGroup() { return cGroup; }

		//"assign"
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }

		//parameter=[Parameter|EString]
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//[Parameter|EString]
		public CrossReference getParameterParameterCrossReference_1_0() { return cParameterParameterCrossReference_1_0; }

		//EString
		public RuleCall getParameterParameterEStringParserRuleCall_1_0_1() { return cParameterParameterEStringParserRuleCall_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//value=[Value|EString]
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//[Value|EString]
		public CrossReference getValueValueCrossReference_3_0() { return cValueValueCrossReference_3_0; }

		//EString
		public RuleCall getValueValueEStringParserRuleCall_3_0_1() { return cValueValueEStringParserRuleCall_3_0_1; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	"param" type=TypeEnum name=EString;
		public ParserRule getRule() { return rule; }

		//"param" type=TypeEnum name=EString
		public Group getGroup() { return cGroup; }

		//"param"
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }

		//type=TypeEnum
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_1_0() { return cTypeTypeEnumEnumRuleCall_1_0; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEStringParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//StringValue:
		//	type=TypeEnum name=EString "=" value=EString;
		public ParserRule getRule() { return rule; }

		//type=TypeEnum name=EString "=" value=EString
		public Group getGroup() { return cGroup; }

		//type=TypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_0_0() { return cTypeTypeEnumEnumRuleCall_0_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=EString
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EString
		public RuleCall getValueEStringParserRuleCall_3_0() { return cValueEStringParserRuleCall_3_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEIntParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IntegerValue:
		//	type=TypeEnum name=EString "=" value=EInt;
		public ParserRule getRule() { return rule; }

		//type=TypeEnum name=EString "=" value=EInt
		public Group getGroup() { return cGroup; }

		//type=TypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_0_0() { return cTypeTypeEnumEnumRuleCall_0_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=EInt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_3_0() { return cValueEIntParserRuleCall_3_0; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueEBooleanParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//BooleanValue:
		//	type=TypeEnum name=EString "=" value=EBoolean;
		public ParserRule getRule() { return rule; }

		//type=TypeEnum name=EString "=" value=EBoolean
		public Group getGroup() { return cGroup; }

		//type=TypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_0_0() { return cTypeTypeEnumEnumRuleCall_0_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=EBoolean
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_3_0() { return cValueEBooleanParserRuleCall_3_0; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class BinaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cBcKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cLeftAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cLeftExpressionCrossReference_0_2_0 = (CrossReference)cLeftAssignment_0_2.eContents().get(0);
		private final RuleCall cLeftExpressionEStringParserRuleCall_0_2_0_1 = (RuleCall)cLeftExpressionCrossReference_0_2_0.eContents().get(1);
		private final Assignment cOperatorAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cOperatorBinaryOperatorsEnumRuleCall_0_3_0 = (RuleCall)cOperatorAssignment_0_3.eContents().get(0);
		private final Assignment cRightAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final CrossReference cRightExpressionCrossReference_0_4_0 = (CrossReference)cRightAssignment_0_4.eContents().get(0);
		private final RuleCall cRightExpressionEStringParserRuleCall_0_4_0_1 = (RuleCall)cRightExpressionCrossReference_0_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cBcKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRootAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRootEBooleanParserRuleCall_1_1_0 = (RuleCall)cRootAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		private final Assignment cLeftAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cLeftExpressionCrossReference_1_3_0 = (CrossReference)cLeftAssignment_1_3.eContents().get(0);
		private final RuleCall cLeftExpressionEStringParserRuleCall_1_3_0_1 = (RuleCall)cLeftExpressionCrossReference_1_3_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cOperatorBinaryOperatorsEnumRuleCall_1_4_0 = (RuleCall)cOperatorAssignment_1_4.eContents().get(0);
		private final Assignment cRightAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final CrossReference cRightExpressionCrossReference_1_5_0 = (CrossReference)cRightAssignment_1_5.eContents().get(0);
		private final RuleCall cRightExpressionEStringParserRuleCall_1_5_0_1 = (RuleCall)cRightExpressionCrossReference_1_5_0.eContents().get(1);
		
		//BinaryConstraint:
		//	"bc" name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString] | "bc" root=EBoolean
		//	name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString];
		public ParserRule getRule() { return rule; }

		//"bc" name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString] | "bc" root=EBoolean
		//name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString]
		public Alternatives getAlternatives() { return cAlternatives; }

		//"bc" name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString]
		public Group getGroup_0() { return cGroup_0; }

		//"bc"
		public Keyword getBcKeyword_0_0() { return cBcKeyword_0_0; }

		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }

		//left=[Expression|EString]
		public Assignment getLeftAssignment_0_2() { return cLeftAssignment_0_2; }

		//[Expression|EString]
		public CrossReference getLeftExpressionCrossReference_0_2_0() { return cLeftExpressionCrossReference_0_2_0; }

		//EString
		public RuleCall getLeftExpressionEStringParserRuleCall_0_2_0_1() { return cLeftExpressionEStringParserRuleCall_0_2_0_1; }

		//operator=BinaryOperators
		public Assignment getOperatorAssignment_0_3() { return cOperatorAssignment_0_3; }

		//BinaryOperators
		public RuleCall getOperatorBinaryOperatorsEnumRuleCall_0_3_0() { return cOperatorBinaryOperatorsEnumRuleCall_0_3_0; }

		//right=[Expression|EString]
		public Assignment getRightAssignment_0_4() { return cRightAssignment_0_4; }

		//[Expression|EString]
		public CrossReference getRightExpressionCrossReference_0_4_0() { return cRightExpressionCrossReference_0_4_0; }

		//EString
		public RuleCall getRightExpressionEStringParserRuleCall_0_4_0_1() { return cRightExpressionEStringParserRuleCall_0_4_0_1; }

		//"bc" root=EBoolean name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString]
		public Group getGroup_1() { return cGroup_1; }

		//"bc"
		public Keyword getBcKeyword_1_0() { return cBcKeyword_1_0; }

		//root=EBoolean
		public Assignment getRootAssignment_1_1() { return cRootAssignment_1_1; }

		//EBoolean
		public RuleCall getRootEBooleanParserRuleCall_1_1_0() { return cRootEBooleanParserRuleCall_1_1_0; }

		//name=EString
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_2_0() { return cNameEStringParserRuleCall_1_2_0; }

		//left=[Expression|EString]
		public Assignment getLeftAssignment_1_3() { return cLeftAssignment_1_3; }

		//[Expression|EString]
		public CrossReference getLeftExpressionCrossReference_1_3_0() { return cLeftExpressionCrossReference_1_3_0; }

		//EString
		public RuleCall getLeftExpressionEStringParserRuleCall_1_3_0_1() { return cLeftExpressionEStringParserRuleCall_1_3_0_1; }

		//operator=BinaryOperators
		public Assignment getOperatorAssignment_1_4() { return cOperatorAssignment_1_4; }

		//BinaryOperators
		public RuleCall getOperatorBinaryOperatorsEnumRuleCall_1_4_0() { return cOperatorBinaryOperatorsEnumRuleCall_1_4_0; }

		//right=[Expression|EString]
		public Assignment getRightAssignment_1_5() { return cRightAssignment_1_5; }

		//[Expression|EString]
		public CrossReference getRightExpressionCrossReference_1_5_0() { return cRightExpressionCrossReference_1_5_0; }

		//EString
		public RuleCall getRightExpressionEStringParserRuleCall_1_5_0_1() { return cRightExpressionEStringParserRuleCall_1_5_0_1; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cHasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cHasValueCrossReference_3_1_0 = (CrossReference)cHasAssignment_3_1.eContents().get(0);
		private final RuleCall cHasValueEStringParserRuleCall_3_1_0_1 = (RuleCall)cHasValueCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cHasAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final CrossReference cHasValueCrossReference_3_2_1_0 = (CrossReference)cHasAssignment_3_2_1.eContents().get(0);
		private final RuleCall cHasValueEStringParserRuleCall_3_2_1_0_1 = (RuleCall)cHasValueCrossReference_3_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//Set:
		//	"set" name=EString "=" ("[" has+=[Value|EString] ("," has+=[Value|EString])* "]")?;
		public ParserRule getRule() { return rule; }

		//"set" name=EString "=" ("[" has+=[Value|EString] ("," has+=[Value|EString])* "]")?
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//("[" has+=[Value|EString] ("," has+=[Value|EString])* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//has+=[Value|EString]
		public Assignment getHasAssignment_3_1() { return cHasAssignment_3_1; }

		//[Value|EString]
		public CrossReference getHasValueCrossReference_3_1_0() { return cHasValueCrossReference_3_1_0; }

		//EString
		public RuleCall getHasValueEStringParserRuleCall_3_1_0_1() { return cHasValueEStringParserRuleCall_3_1_0_1; }

		//("," has+=[Value|EString])*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//has+=[Value|EString]
		public Assignment getHasAssignment_3_2_1() { return cHasAssignment_3_2_1; }

		//[Value|EString]
		public CrossReference getHasValueCrossReference_3_2_1_0() { return cHasValueCrossReference_3_2_1_0; }

		//EString
		public RuleCall getHasValueEStringParserRuleCall_3_2_1_0_1() { return cHasValueEStringParserRuleCall_3_2_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
	}

	public class UnaryConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorUnaryOperatorsEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cExpressionExpressionCrossReference_3_0 = (CrossReference)cExpressionAssignment_3.eContents().get(0);
		private final RuleCall cExpressionExpressionEStringParserRuleCall_3_0_1 = (RuleCall)cExpressionExpressionCrossReference_3_0.eContents().get(1);
		
		//UnaryConstraint:
		//	"uc" name=EString Operator=UnaryOperators expression=[Expression|EString];
		public ParserRule getRule() { return rule; }

		//"uc" name=EString Operator=UnaryOperators expression=[Expression|EString]
		public Group getGroup() { return cGroup; }

		//"uc"
		public Keyword getUcKeyword_0() { return cUcKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//Operator=UnaryOperators
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }

		//UnaryOperators
		public RuleCall getOperatorUnaryOperatorsEnumRuleCall_2_0() { return cOperatorUnaryOperatorsEnumRuleCall_2_0; }

		//expression=[Expression|EString]
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//[Expression|EString]
		public CrossReference getExpressionExpressionCrossReference_3_0() { return cExpressionExpressionCrossReference_3_0; }

		//EString
		public RuleCall getExpressionExpressionEStringParserRuleCall_3_0_1() { return cExpressionExpressionEStringParserRuleCall_3_0_1; }
	}
	
	
	public class TypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntegerTypeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntegerTypeIntKeyword_0_0 = (Keyword)cIntegerTypeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBooleanTypeBooleanKeyword_1_0 = (Keyword)cBooleanTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStringTypeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStringTypeStringKeyword_2_0 = (Keyword)cStringTypeEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum TypeEnum:
		//	IntegerType="int" | BooleanType="boolean" | StringType="string";
		public EnumRule getRule() { return rule; }

		//IntegerType="int" | BooleanType="boolean" | StringType="string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerType="int"
		public EnumLiteralDeclaration getIntegerTypeEnumLiteralDeclaration_0() { return cIntegerTypeEnumLiteralDeclaration_0; }

		//"int"
		public Keyword getIntegerTypeIntKeyword_0_0() { return cIntegerTypeIntKeyword_0_0; }

		//BooleanType="boolean"
		public EnumLiteralDeclaration getBooleanTypeEnumLiteralDeclaration_1() { return cBooleanTypeEnumLiteralDeclaration_1; }

		//"boolean"
		public Keyword getBooleanTypeBooleanKeyword_1_0() { return cBooleanTypeBooleanKeyword_1_0; }

		//StringType="string"
		public EnumLiteralDeclaration getStringTypeEnumLiteralDeclaration_2() { return cStringTypeEnumLiteralDeclaration_2; }

		//"string"
		public Keyword getStringTypeStringKeyword_2_0() { return cStringTypeStringKeyword_2_0; }
	}

	public class BinaryOperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOperators");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessLessKeyword_0_0 = (Keyword)cLessEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterGreaterKeyword_1_0 = (Keyword)cGreaterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMultiplicationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMultiplicationMultiplicationKeyword_3_0 = (Keyword)cMultiplicationEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cAdditionEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cAdditionAdditionKeyword_4_0 = (Keyword)cAdditionEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSubsetEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSubsetSubsetKeyword_5_0 = (Keyword)cSubsetEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cAndAndKeyword_6_0 = (Keyword)cAndEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cOrOrKeyword_7_0 = (Keyword)cOrEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum BinaryOperators:
		//	less | greater | equal | multiplication | addition | subset | and | or;
		public EnumRule getRule() { return rule; }

		//less | greater | equal | multiplication | addition | subset | and | or
		public Alternatives getAlternatives() { return cAlternatives; }

		//less
		public EnumLiteralDeclaration getLessEnumLiteralDeclaration_0() { return cLessEnumLiteralDeclaration_0; }

		//"less"
		public Keyword getLessLessKeyword_0_0() { return cLessLessKeyword_0_0; }

		//greater
		public EnumLiteralDeclaration getGreaterEnumLiteralDeclaration_1() { return cGreaterEnumLiteralDeclaration_1; }

		//"greater"
		public Keyword getGreaterGreaterKeyword_1_0() { return cGreaterGreaterKeyword_1_0; }

		//equal
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }

		//"equal"
		public Keyword getEqualEqualKeyword_2_0() { return cEqualEqualKeyword_2_0; }

		//multiplication
		public EnumLiteralDeclaration getMultiplicationEnumLiteralDeclaration_3() { return cMultiplicationEnumLiteralDeclaration_3; }

		//"multiplication"
		public Keyword getMultiplicationMultiplicationKeyword_3_0() { return cMultiplicationMultiplicationKeyword_3_0; }

		//addition
		public EnumLiteralDeclaration getAdditionEnumLiteralDeclaration_4() { return cAdditionEnumLiteralDeclaration_4; }

		//"addition"
		public Keyword getAdditionAdditionKeyword_4_0() { return cAdditionAdditionKeyword_4_0; }

		//subset
		public EnumLiteralDeclaration getSubsetEnumLiteralDeclaration_5() { return cSubsetEnumLiteralDeclaration_5; }

		//"subset"
		public Keyword getSubsetSubsetKeyword_5_0() { return cSubsetSubsetKeyword_5_0; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_6() { return cAndEnumLiteralDeclaration_6; }

		//"and"
		public Keyword getAndAndKeyword_6_0() { return cAndAndKeyword_6_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_7() { return cOrEnumLiteralDeclaration_7; }

		//"or"
		public Keyword getOrOrKeyword_7_0() { return cOrOrKeyword_7_0; }
	}

	public class UnaryOperatorsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperators");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryOperators:
		//	not;
		public EnumRule getRule() { return rule; }

		//not
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}
	
	private RootElements pRoot;
	private ExpressionElements pExpression;
	private ValueElements pValue;
	private ConfigurationElements pConfiguration;
	private AssignmentElements pAssignment;
	private ParameterElements pParameter;
	private EStringElements pEString;
	private TypeEnumElements unknownRuleTypeEnum;
	private StringValueElements pStringValue;
	private IntegerValueElements pIntegerValue;
	private BooleanValueElements pBooleanValue;
	private EIntElements pEInt;
	private EBooleanElements pEBoolean;
	private BinaryConstraintElements pBinaryConstraint;
	private SetElements pSet;
	private UnaryConstraintElements pUnaryConstraint;
	private BinaryOperatorsElements unknownRuleBinaryOperators;
	private UnaryOperatorsElements unknownRuleUnaryOperators;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CfgDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.cfgdsl.CfgDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	{Root} configurators+=Configuration* expressions+=Expression*;
	public RootElements getRootAccess() {
		return (pRoot != null) ? pRoot : (pRoot = new RootElements());
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Expression:
	//	BinaryConstraint | Parameter | Set | StringValue | IntegerValue | BooleanValue | UnaryConstraint;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Value:
	//	StringValue | IntegerValue | BooleanValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Configuration:
	//	{Configuration} "cfg" (assignments+=Assignment ("," assignments+=Assignment)*)?;
	public ConfigurationElements getConfigurationAccess() {
		return (pConfiguration != null) ? pConfiguration : (pConfiguration = new ConfigurationElements());
	}
	
	public ParserRule getConfigurationRule() {
		return getConfigurationAccess().getRule();
	}

	//Assignment:
	//	"assign" parameter=[Parameter|EString] "to" value=[Value|EString];
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//Parameter:
	//	"param" type=TypeEnum name=EString;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//enum TypeEnum:
	//	IntegerType="int" | BooleanType="boolean" | StringType="string";
	public TypeEnumElements getTypeEnumAccess() {
		return (unknownRuleTypeEnum != null) ? unknownRuleTypeEnum : (unknownRuleTypeEnum = new TypeEnumElements());
	}
	
	public EnumRule getTypeEnumRule() {
		return getTypeEnumAccess().getRule();
	}

	//StringValue:
	//	type=TypeEnum name=EString "=" value=EString;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//IntegerValue:
	//	type=TypeEnum name=EString "=" value=EInt;
	public IntegerValueElements getIntegerValueAccess() {
		return (pIntegerValue != null) ? pIntegerValue : (pIntegerValue = new IntegerValueElements());
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//BooleanValue:
	//	type=TypeEnum name=EString "=" value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//BinaryConstraint:
	//	"bc" name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString] | "bc" root=EBoolean
	//	name=EString left=[Expression|EString] operator=BinaryOperators right=[Expression|EString];
	public BinaryConstraintElements getBinaryConstraintAccess() {
		return (pBinaryConstraint != null) ? pBinaryConstraint : (pBinaryConstraint = new BinaryConstraintElements());
	}
	
	public ParserRule getBinaryConstraintRule() {
		return getBinaryConstraintAccess().getRule();
	}

	//Set:
	//	"set" name=EString "=" ("[" has+=[Value|EString] ("," has+=[Value|EString])* "]")?;
	public SetElements getSetAccess() {
		return (pSet != null) ? pSet : (pSet = new SetElements());
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//UnaryConstraint:
	//	"uc" name=EString Operator=UnaryOperators expression=[Expression|EString];
	public UnaryConstraintElements getUnaryConstraintAccess() {
		return (pUnaryConstraint != null) ? pUnaryConstraint : (pUnaryConstraint = new UnaryConstraintElements());
	}
	
	public ParserRule getUnaryConstraintRule() {
		return getUnaryConstraintAccess().getRule();
	}

	//enum BinaryOperators:
	//	less | greater | equal | multiplication | addition | subset | and | or;
	public BinaryOperatorsElements getBinaryOperatorsAccess() {
		return (unknownRuleBinaryOperators != null) ? unknownRuleBinaryOperators : (unknownRuleBinaryOperators = new BinaryOperatorsElements());
	}
	
	public EnumRule getBinaryOperatorsRule() {
		return getBinaryOperatorsAccess().getRule();
	}

	//enum UnaryOperators:
	//	not;
	public UnaryOperatorsElements getUnaryOperatorsAccess() {
		return (unknownRuleUnaryOperators != null) ? unknownRuleUnaryOperators : (unknownRuleUnaryOperators = new UnaryOperatorsElements());
	}
	
	public EnumRule getUnaryOperatorsRule() {
		return getUnaryOperatorsAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
