/**
 * generated by Xtext
 */
package org.xtext.cfgdsl.generator;

import ConfiguratorPackage.BinaryConstraint;
import ConfiguratorPackage.Expression;
import ConfiguratorPackage.Root;
import ConfiguratorPackage.UnaryConstraint;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CfgDslGenerator implements IGenerator {
  public static CharSequence compileToJava(final Root it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package cfgdsl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Validator {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean validate(List<Assignment> assignments) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean valid = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Assignment> map = new HashMap<String, Assignment>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Check the types of the assignments are well typed");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Assignment a : assignments) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("valid = valid && (a.getParameter().getType().equals(a.getValue().getType()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("map.put(a.getParameter().getName(), a);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Expression expr : ");
    EList<Expression> _expressions = it.getExpressions();
    Iterable<BinaryConstraint> _filter = Iterables.<BinaryConstraint>filter(_expressions, BinaryConstraint.class);
    _builder.append(_filter, "\t\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("BinaryConstraint bc = (BinaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(bc.getRoot()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(validate(bc, map)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Expression expr : ");
    EList<Expression> _expressions_1 = it.getExpressions();
    Iterable<UnaryConstraint> _filter_1 = Iterables.<UnaryConstraint>filter(_expressions_1, UnaryConstraint.class);
    _builder.append(_filter_1, "\t\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("UnaryConstraint uc = (UnaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(uc.getRoot()){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(validate(uc, map)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else{");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Expression validate(BinaryConstraint bc, Map<String, Assignment> map){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression left = getExpr(bc.getLeft(), map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression right = getExpr(bc.getRight(), map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactoryImpl config = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(bc.getOperator()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case equals:\t\t\treturn left.equals(right);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case less:\t\t\t\tBooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof IntegerValue && right instanceof IntegerValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left.getValue() < right.getValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case greater:\t\t\tBooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof IntegerValue && right instanceof IntegerValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left.getValue() > right.getValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case addition:\t\t\tif(bc.getRoot())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("else if(left instanceof IntegerValue && right instanceof IntegerValue){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("IntegerValue i = config.createIntegerValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("i.setValue(left.getValue() + right.getValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("} else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case multiplication:\tif(bc.getRoot())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("else if(left instanceof IntegerValue && right instanceof IntegerValue){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("IntegerValue i = config.createIntegerValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("i.setValue(left.getValue() * right.getValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("} else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case subset:\t\t\tBooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(right.getHas().contains(left)){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case and:\t\t\t\tBooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof BooleanValue && right instanceof BooleanValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left.getValue() && right.getValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case or:\t\t\t\tBooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof BooleanValue && right instanceof BooleanValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left.getValue() || right.getValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Expression getExpr(Expression expr, Map<String, Assignment> map) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expr instanceof BinaryConstraint) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BinaryConstraint bc = (BinaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = validate(bc, map);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(expr instanceof UnaryConstraint) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UnaryConstraint uc = (UnaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = validate(uc, map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(expr instanceof Parameter) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Parameter p = (Parameter) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Assignment a = map.get(p.getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Expression e = a.getValue();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Expression e = expr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BooleanValue validate(UnaryConstraint uc, Map<String, Assignment> map){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactoryImpl config = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression expr = uc.getExpression;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expr instanceof BinaryConstraint){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BinaryConstraint bc = (BinaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = validate(bc, map);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.getValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(expr instanceof UnaryConstraint){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UnaryConstraint uc = (UnaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = validate(bc, map);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.getValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(expr instanceof BooleanValue){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = (BooleanValue)expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.getValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
  }
}
