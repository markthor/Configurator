/**
 * generated by Xtext
 */
package org.xtext.cfgdsl.generator;

import ConfiguratorPackage.BinaryConstraint;
import ConfiguratorPackage.BooleanValue;
import ConfiguratorPackage.Expression;
import ConfiguratorPackage.IntegerValue;
import ConfiguratorPackage.Parameter;
import ConfiguratorPackage.Root;
import ConfiguratorPackage.Set;
import ConfiguratorPackage.StringValue;
import ConfiguratorPackage.TypeEnum;
import ConfiguratorPackage.UnaryConstraint;
import ConfiguratorPackage.Value;
import com.google.common.collect.Iterables;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.cfgdsl.generator.JsonConverter;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CfgDslGenerator implements IGenerator {
  public static CharSequence compileToJava(final Root it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package cfgdsl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Assignment;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.BinaryConstraint;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.BooleanValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.ConfiguratorPackageFactory;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Expression;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.IntegerValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Parameter;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Set;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.StringValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.TypeEnum;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.UnaryConstraint;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Value;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.impl.ConfiguratorPackageFactoryImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Validator {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static boolean validate(List<Assignment> assignments) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("boolean valid = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Assignment> map = new HashMap<String, Assignment>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Check the types of the assignments are well typed");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(Assignment a : assignments) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(a.getValue() instanceof StringValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("valid = valid && (a.getParameter().getType().equals(((StringValue)a.getValue()).getType()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(a.getValue() instanceof IntegerValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("valid = valid && (a.getParameter().getType().equals(((IntegerValue)a.getValue()).getType()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(a.getValue() instanceof BooleanValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("valid = valid && (a.getParameter().getType().equals(((BooleanValue)a.getValue()).getType()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("map.put(a.getParameter().getName(), a);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(!valid)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Expression> _expressions = it.getExpressions();
      for(final Expression expr : _expressions) {
        _builder.append("\t\t");
        _builder.append("if(");
        _builder.append((expr instanceof BinaryConstraint), "\t\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("BinaryConstraint bc = (BinaryConstraint) ");
        _builder.append(expr, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if(bc.getRoot()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("if(!validate(bc, map)) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("return false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("if(");
        _builder.append((expr instanceof UnaryConstraint), "\t\t");
        _builder.append("){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("UnaryConstraint uc = (UnaryConstraint) ");
        _builder.append(expr, "\t\t\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if(uc.getRoot()){");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("if(!validate(uc, map)) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("return false;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static List<Expression> something() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactory factory = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<Expression> expressions = new ArrayList<Expression>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Value> values = new HashMap<String, Value>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringValue s;");
    _builder.newLine();
    {
      EList<Expression> _expressions_1 = it.getExpressions();
      Iterable<StringValue> _filter = Iterables.<StringValue>filter(_expressions_1, StringValue.class);
      for(final StringValue expr_1 : _filter) {
        _builder.append("\t\t");
        _builder.append("s = factory.createStringValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("s.setName(\"");
        String _name = expr_1.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("s.setType(TypeEnum.get(\"");
        TypeEnum _type = expr_1.getType();
        _builder.append(_type, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("s.setValue(\"");
        String _value = expr_1.getValue();
        _builder.append(_value, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(s);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_1 = expr_1.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\", s);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IntegerValue i;");
    _builder.newLine();
    {
      EList<Expression> _expressions_2 = it.getExpressions();
      Iterable<IntegerValue> _filter_1 = Iterables.<IntegerValue>filter(_expressions_2, IntegerValue.class);
      for(final IntegerValue expr_2 : _filter_1) {
        _builder.append("\t\t");
        _builder.append("i = factory.createIntegerValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("i.setName(\"");
        String _name_2 = expr_2.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("i.setType(TypeEnum.get(\"");
        TypeEnum _type_1 = expr_2.getType();
        _builder.append(_type_1, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("i.setValue(");
        int _value_1 = expr_2.getValue();
        _builder.append(_value_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(i);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_3 = expr_2.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\", i);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BooleanValue b;");
    _builder.newLine();
    {
      EList<Expression> _expressions_3 = it.getExpressions();
      Iterable<BooleanValue> _filter_2 = Iterables.<BooleanValue>filter(_expressions_3, BooleanValue.class);
      for(final BooleanValue expr_3 : _filter_2) {
        _builder.append("\t\t");
        _builder.append("b = factory.createBooleanValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("b.setName(\"");
        String _name_4 = expr_3.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("b.setType(TypeEnum.get(\"");
        TypeEnum _type_2 = expr_3.getType();
        _builder.append(_type_2, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("b.setValue(");
        boolean _isValue = expr_3.isValue();
        _builder.append(_isValue, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(b);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_5 = expr_3.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("\", b);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Parameter p;");
    _builder.newLine();
    {
      EList<Expression> _expressions_4 = it.getExpressions();
      Iterable<Parameter> _filter_3 = Iterables.<Parameter>filter(_expressions_4, Parameter.class);
      for(final Parameter expr_4 : _filter_3) {
        _builder.append("\t\t");
        _builder.append("p = factory.createParameter();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("p.setName(\"");
        String _name_6 = expr_4.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("p.setType(TypeEnum.get(\"");
        TypeEnum _type_3 = expr_4.getType();
        _builder.append(_type_3, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(p);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set set;");
    _builder.newLine();
    {
      EList<Expression> _expressions_5 = it.getExpressions();
      Iterable<Set> _filter_4 = Iterables.<Set>filter(_expressions_5, Set.class);
      for(final Set expr_5 : _filter_4) {
        _builder.append("\t\t");
        _builder.append("set = factory.createSet();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("set.setName(\"");
        String _name_7 = expr_5.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t\t\t");
        _builder.newLine();
        {
          EList<Value> _has = expr_5.getHas();
          for(final Value value : _has) {
            _builder.append("\t\t");
            _builder.append("set.getHas().add(values.get(\"");
            String _name_8 = value.getName();
            _builder.append(_name_8, "\t\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("expressions.add(set);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Expression> _expressions_6 = it.getExpressions();
      Iterable<Parameter> _filter_5 = Iterables.<Parameter>filter(_expressions_6, Parameter.class);
      for(final Parameter expr_6 : _filter_5) {
        _builder.append("\t\t");
        _builder.append("Parameter p = factory.createParameter();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("p.setName(\"");
        String _name_9 = expr_6.getName();
        _builder.append(_name_9, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("p.setType(TypeEnum.get(\"");
        TypeEnum _type_4 = expr_6.getType();
        _builder.append(_type_4, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(p);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return expressions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Expression validate(BinaryConstraint bc, Map<String, Assignment> map){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression left = getExpr(bc.getLeft(), map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression right = getExpr(bc.getRight(), map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactory config = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch(bc.getOperator()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case EQUAL:\t\t\t\tb.setValue(left.equals(right));");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case LESS:\t\t\t\tb.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof IntegerValue && right instanceof IntegerValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(((IntegerValue)left).getValue() < ((IntegerValue)right).getValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case GREATER:\t\t\tb.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof IntegerValue && right instanceof IntegerValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(((IntegerValue)left).getValue() > ((IntegerValue)right).getValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case ADDITION:\t\t\tif(bc.isRoot()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("} else if(left instanceof IntegerValue && right instanceof IntegerValue){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("IntegerValue i = config.createIntegerValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("i.setValue(((IntegerValue)left).getValue() + ((IntegerValue)right).getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("} else");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case MULTIPLICATION:\tif(bc.isRoot()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("else if(left instanceof IntegerValue && right instanceof IntegerValue){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("IntegerValue i = config.createIntegerValue();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("i.setValue(((IntegerValue)left).getValue() * ((IntegerValue)right).getValue());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return i;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case SUBSET:\t\t\tb.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(right instanceof Set && left instanceof Value)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(((Set)right).getHas().contains(left))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case AND:\t\t\t\tb.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof BooleanValue && right instanceof BooleanValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(((BooleanValue)left).isValue() && ((BooleanValue)right).isValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case OR:\t\t\t\tb.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("if(left instanceof BooleanValue && right instanceof BooleanValue)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if(((BooleanValue)left).isValue() || ((BooleanValue)right).isValue())");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("b.setValue(true);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b.setValue(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Expression getExpr(Expression expr, Map<String, Assignment> map) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expr instanceof BinaryConstraint) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BinaryConstraint bc = (BinaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = validate(bc, map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(expr instanceof UnaryConstraint) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("UnaryConstraint uc = (UnaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = validate(uc, map);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if(expr instanceof Parameter) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Parameter p = (Parameter) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Assignment a = map.get(p.getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = a.getValue();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e = expr;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BooleanValue validate(UnaryConstraint uc, Map<String, Assignment> map){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactory config = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BooleanValue b = config.createBooleanValue();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Expression expr = uc.getExpression();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expr instanceof BinaryConstraint){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BinaryConstraint bc = (BinaryConstraint) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = (BooleanValue) validate(bc, map);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.isValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(expr instanceof UnaryConstraint){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = validate((UnaryConstraint) expr, map);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.isValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else if(expr instanceof BooleanValue){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("BooleanValue value = (BooleanValue) expr;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("b.setValue(!(value.isValue()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return b;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public static String compileToJson(final Root it) {
    return JsonConverter.generate(it);
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Root> _filter = Iterables.<Root>filter(_iterable, Root.class);
    final Consumer<Root> _function = new Consumer<Root>() {
      public void accept(final Root it) {
        final String fname = "Mikkel";
        String _compileToJson = CfgDslGenerator.compileToJson(it);
        fsa.generateFile((("MDDPConfigurator/" + "example") + ".json"), _compileToJson);
      }
    };
    _filter.forEach(_function);
  }
}
