/**
 * generated by Xtext
 */
package org.xtext.cfgdsl.generator;

import ConfiguratorPackage.Root;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.xtext.cfgdsl.generator.JsonConverter;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CfgDslGenerator implements IGenerator {
  /**
   * class Validator {
   * 
   * public static boolean validate(List<Assignment> assignments) {
   * boolean valid = true;
   * Map<String, Assignment> map = new HashMap<String, Assignment>();
   * 
   * // Check the types of the assignments are well typed
   * for(Assignment a : assignments) {
   * if(a.getValue() instanceof StringValue)
   * valid = valid && (a.getParameter().getType().equals(((StringValue)a.getValue()).getType()));
   * if(a.getValue() instanceof IntegerValue)
   * valid = valid && (a.getParameter().getType().equals(((IntegerValue)a.getValue()).getType()));
   * if(a.getValue() instanceof BooleanValue)
   * valid = valid && (a.getParameter().getType().equals(((BooleanValue)a.getValue()).getType()));
   * 
   * map.put(a.getParameter().getName(), a);
   * }
   * if(!valid)
   * return false;
   * 
   * ...Start the validation
   * 
   * return true;
   * }
   * 
   * 
   * 
   * }
   */
  public static String compileToJson(final Root it) {
    return JsonConverter.generate(it);
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Root> _filter = Iterables.<Root>filter(_iterable, Root.class);
    final Procedure1<Root> _function = new Procedure1<Root>() {
      public void apply(final Root it) {
        final String fname = "Mikkel";
        String _compileToJson = CfgDslGenerator.compileToJson(it);
        fsa.generateFile((("MDDPConfigurator/" + "example") + ".json"), _compileToJson);
      }
    };
    IterableExtensions.<Root>forEach(_filter, _function);
  }
}
