/**
 * generated by Xtext
 */
package org.xtext.cfgdsl.generator;

import ConfiguratorPackage.BinaryConstraint;
import ConfiguratorPackage.BinaryOperators;
import ConfiguratorPackage.BooleanValue;
import ConfiguratorPackage.Expression;
import ConfiguratorPackage.IntegerValue;
import ConfiguratorPackage.Parameter;
import ConfiguratorPackage.Root;
import ConfiguratorPackage.Set;
import ConfiguratorPackage.StringValue;
import ConfiguratorPackage.TypeEnum;
import ConfiguratorPackage.UnaryConstraint;
import ConfiguratorPackage.UnaryOperators;
import ConfiguratorPackage.Value;
import com.google.common.collect.Iterables;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.cfgdsl.generator.JsonConverter;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CfgDslGenerator implements IGenerator {
  public static CharSequence compileToJava(final Root it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package mddp.configurator.logic;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.BinaryConstraint;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.BinaryOperators;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.BooleanValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.ConfiguratorPackageFactory;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Expression;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.IntegerValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Parameter;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Set;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.StringValue;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.TypeEnum;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.UnaryConstraint;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.UnaryOperators;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.Value;");
    _builder.newLine();
    _builder.append("import ConfiguratorPackage.impl.ConfiguratorPackageFactoryImpl;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ExpressionHolder {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static List<Parameter> parameters;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static List<Expression> expressions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static List<Parameter> getParameters() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(parameters != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return parameters;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expressions == null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("expressions = getExpressions();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("parameters = new ArrayList<Parameter>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactory factory = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Parameter p;");
    _builder.newLine();
    {
      EList<Expression> _expressions = it.getExpressions();
      Iterable<Parameter> _filter = Iterables.<Parameter>filter(_expressions, Parameter.class);
      for(final Parameter expr : _filter) {
        _builder.append("\t\t");
        _builder.append("p = factory.createParameter();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("p.setName(\"");
        String _name = expr.getName();
        _builder.append(_name, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("p.setType(TypeEnum.get(\"");
        TypeEnum _type = expr.getType();
        _builder.append(_type, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("parameters.add(p);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return parameters;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static List<Expression> getExpressions() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(expressions != null)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return expressions;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ConfiguratorPackageFactory factory = ConfiguratorPackageFactoryImpl.init();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, Value> values = new HashMap<String, Value>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("HashMap<String, Expression> constraintMap = new HashMap<String, Expression>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("expressions = new ArrayList<Expression>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringValue s;");
    _builder.newLine();
    {
      EList<Expression> _expressions_1 = it.getExpressions();
      Iterable<StringValue> _filter_1 = Iterables.<StringValue>filter(_expressions_1, StringValue.class);
      for(final StringValue expr_1 : _filter_1) {
        _builder.append("\t\t");
        _builder.append("s = factory.createStringValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("s.setName(\"");
        String _name_1 = expr_1.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("s.setType(TypeEnum.get(\"");
        TypeEnum _type_1 = expr_1.getType();
        _builder.append(_type_1, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("s.setValue(\"");
        String _value = expr_1.getValue();
        _builder.append(_value, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(s);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_2 = expr_1.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("\", s);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_3 = expr_1.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\",s);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IntegerValue i;");
    _builder.newLine();
    {
      EList<Expression> _expressions_2 = it.getExpressions();
      Iterable<IntegerValue> _filter_2 = Iterables.<IntegerValue>filter(_expressions_2, IntegerValue.class);
      for(final IntegerValue expr_2 : _filter_2) {
        _builder.append("\t\t");
        _builder.append("i = factory.createIntegerValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("i.setName(\"");
        String _name_4 = expr_2.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("i.setType(TypeEnum.get(\"");
        TypeEnum _type_2 = expr_2.getType();
        _builder.append(_type_2, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("i.setValue(");
        int _value_1 = expr_2.getValue();
        _builder.append(_value_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(i);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_5 = expr_2.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("\", i);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_6 = expr_2.getName();
        _builder.append(_name_6, "\t\t");
        _builder.append("\",i);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BooleanValue b;");
    _builder.newLine();
    {
      EList<Expression> _expressions_3 = it.getExpressions();
      Iterable<BooleanValue> _filter_3 = Iterables.<BooleanValue>filter(_expressions_3, BooleanValue.class);
      for(final BooleanValue expr_3 : _filter_3) {
        _builder.append("\t\t");
        _builder.append("b = factory.createBooleanValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("b.setName(\"");
        String _name_7 = expr_3.getName();
        _builder.append(_name_7, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("b.setType(TypeEnum.get(\"");
        TypeEnum _type_3 = expr_3.getType();
        _builder.append(_type_3, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("b.setValue(");
        boolean _isValue = expr_3.isValue();
        _builder.append(_isValue, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(b);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("values.put(\"");
        String _name_8 = expr_3.getName();
        _builder.append(_name_8, "\t\t");
        _builder.append("\", b);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_9 = expr_3.getName();
        _builder.append(_name_9, "\t\t");
        _builder.append("\",b);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Parameter p;");
    _builder.newLine();
    {
      EList<Expression> _expressions_4 = it.getExpressions();
      Iterable<Parameter> _filter_4 = Iterables.<Parameter>filter(_expressions_4, Parameter.class);
      for(final Parameter expr_4 : _filter_4) {
        _builder.append("\t\t");
        _builder.append("p = factory.createParameter();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("p.setName(\"");
        String _name_10 = expr_4.getName();
        _builder.append(_name_10, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("p.setType(TypeEnum.get(\"");
        TypeEnum _type_4 = expr_4.getType();
        _builder.append(_type_4, "\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("expressions.add(p);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_11 = expr_4.getName();
        _builder.append(_name_11, "\t\t");
        _builder.append("\",p);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Set set;");
    _builder.newLine();
    {
      EList<Expression> _expressions_5 = it.getExpressions();
      Iterable<Set> _filter_5 = Iterables.<Set>filter(_expressions_5, Set.class);
      for(final Set expr_5 : _filter_5) {
        _builder.append("\t\t");
        _builder.append("set = factory.createSet();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("set.setName(\"");
        String _name_12 = expr_5.getName();
        _builder.append(_name_12, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        {
          EList<Value> _has = expr_5.getHas();
          for(final Value value : _has) {
            _builder.append("\t\t");
            _builder.append("set.getHas().add(values.get(\"");
            String _name_13 = value.getName();
            _builder.append(_name_13, "\t\t");
            _builder.append("\"));");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t");
        _builder.append("expressions.add(set);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_14 = expr_5.getName();
        _builder.append(_name_14, "\t\t");
        _builder.append("\",set);");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("BinaryConstraint bc;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringValue r;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("StringValue l;");
    _builder.newLine();
    {
      EList<Expression> _expressions_6 = it.getExpressions();
      Iterable<BinaryConstraint> _filter_6 = Iterables.<BinaryConstraint>filter(_expressions_6, BinaryConstraint.class);
      for(final BinaryConstraint expr_6 : _filter_6) {
        _builder.append("\t\t");
        _builder.append("bc = factory.createBinaryConstraint();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("bc.setName(\"");
        String _name_15 = expr_6.getName();
        _builder.append(_name_15, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("bc.setOperator(BinaryOperators.");
        BinaryOperators _operator = expr_6.getOperator();
        String _string = _operator.toString();
        String _upperCase = _string.toUpperCase();
        _builder.append(_upperCase, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("bc.setRoot(");
        boolean _isRoot = expr_6.isRoot();
        _builder.append(_isRoot, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("r = factory.createStringValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("r.setName(\"");
        Expression _right = expr_6.getRight();
        String _name_16 = _right.getName();
        _builder.append(_name_16, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("l = factory.createStringValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("l.setName(\"");
        Expression _left = expr_6.getLeft();
        String _name_17 = _left.getName();
        _builder.append(_name_17, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("bc.setRight(r);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("bc.setLeft(l);");
        _builder.newLine();
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_18 = expr_6.getName();
        _builder.append(_name_18, "\t\t");
        _builder.append("\", bc);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("expressions.add(bc);");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("UnaryConstraint uc;");
    _builder.newLine();
    {
      EList<Expression> _expressions_7 = it.getExpressions();
      Iterable<UnaryConstraint> _filter_7 = Iterables.<UnaryConstraint>filter(_expressions_7, UnaryConstraint.class);
      for(final UnaryConstraint expr_7 : _filter_7) {
        _builder.append("\t\t");
        _builder.append("uc = factory.createUnaryConstraint();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("uc.setName(\"");
        String _name_19 = expr_7.getName();
        _builder.append(_name_19, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("uc.setOperator(UnaryOperators.");
        UnaryOperators _operator_1 = expr_7.getOperator();
        String _string_1 = _operator_1.toString();
        String _upperCase_1 = _string_1.toUpperCase();
        _builder.append(_upperCase_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("uc.setRoot(");
        boolean _isRoot_1 = expr_7.isRoot();
        _builder.append(_isRoot_1, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("constraintMap.put(\"");
        String _name_20 = expr_7.getName();
        _builder.append(_name_20, "\t\t");
        _builder.append("\", uc);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("s = factory.createStringValue();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("s.setName(\"");
        Expression _expression = expr_7.getExpression();
        String _name_21 = _expression.getName();
        _builder.append(_name_21, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("uc.setExpression(s);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("expressions.add(uc);");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Map.Entry<String, Expression> entry : constraintMap.entrySet())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Expression e = entry.getValue();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if(e instanceof BinaryConstraint){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("BinaryConstraint localbc = (BinaryConstraint) e;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("localbc.setLeft(constraintMap.get(localbc.getLeft().getName()));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("localbc.setRight(constraintMap.get(localbc.getRight().getName()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if(e instanceof UnaryConstraint) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("UnaryConstraint localuc = (UnaryConstraint) e;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("localuc.setExpression(constraintMap.get(localuc.getExpression().getName()));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return expressions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * class Validator {
   * 
   * public static boolean validate(List<Assignment> assignments) {
   * boolean valid = true;
   * Map<String, Assignment> map = new HashMap<String, Assignment>();
   * 
   * // Check the types of the assignments are well typed
   * for(Assignment a : assignments) {
   * if(a.getValue() instanceof StringValue)
   * valid = valid && (a.getParameter().getType().equals(((StringValue)a.getValue()).getType()));
   * if(a.getValue() instanceof IntegerValue)
   * valid = valid && (a.getParameter().getType().equals(((IntegerValue)a.getValue()).getType()));
   * if(a.getValue() instanceof BooleanValue)
   * valid = valid && (a.getParameter().getType().equals(((BooleanValue)a.getValue()).getType()));
   * 
   * map.put(a.getParameter().getName(), a);
   * }
   * if(!valid)
   * return false;
   * 
   * ...Start the validation
   * 
   * return true;
   * }
   * 
   * 
   * 
   * }
   */
  public static String compileToJson(final Root it) {
    return JsonConverter.generate(it);
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Root> _filter = Iterables.<Root>filter(_iterable, Root.class);
    final Consumer<Root> _function = new Consumer<Root>() {
      public void accept(final Root it) {
        final String fname = "Mikkel";
        CharSequence _compileToJava = CfgDslGenerator.compileToJava(it);
        fsa.generateFile((("MDDPConfigurator/" + fname) + ".java"), _compileToJava);
      }
    };
    _filter.forEach(_function);
  }
}
