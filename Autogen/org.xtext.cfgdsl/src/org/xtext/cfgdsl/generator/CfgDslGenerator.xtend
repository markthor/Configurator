/*
 * generated by Xtext
 */
package org.xtext.cfgdsl.generator

import ConfiguratorPackage.BinaryConstraint
import ConfiguratorPackage.Root
import ConfiguratorPackage.UnaryConstraint
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CfgDslGenerator implements IGenerator {
	
	def static compileToJava(Root it) {
		'''
			package cfgdsl;

			class Validator {
				
				public boolean validate(List<Assignment> assignments) {
					boolean valid = true;
					Map<String, Assignment> map = new HashMap<String, Assignment>();
					
					// Check the types of the assignments are well typed
					for(Assignment a : assignments) {
						valid = valid && (a.getParameter().getType().equals(a.getValue().getType()));
						map.put(a.getParameter().getName(), a);
					}
					
					for(Expression expr : «it.expressions.filter(typeof(BinaryConstraint))») {
						BinaryConstraint bc = (BinaryConstraint) expr;
						switch(bc.getOperator()) {
							case less: return false
								
						}
					}
				}
				
				public Expression validate(BinaryConstraint bc, Map<String, Assignment> map){
					Expression left;
					Expression right;
					
					if(bc.getLeft() instanceof BinaryConstraint){
						if(validate(bc.getLeft(), map)){
							
						}
					} else if(bc.getLeft() instanceof UnaryConstraint){
						
					} else if(bc.getLeft() instanceof Parameter){
						Assignment a = map.get(bc.getLeft().getName());
						Expression left = a.getValue();
					} else {
						Expression left = bc.getLeft();
					}

					
					/*
					else if(bc.getLeft() instanceof Set){
						
					}
					else if(bc.getLeft() instanceof Value){
						Expression left = bc.getLeft();
					}
					
					*/
					
					switch(bc.getOperator()) {
						case equals:			if(left instanceof Value && right instanceof Value)
													return left.equals(right);
												else
													return false;
						case less:				if(left instanceof IntegerValue && right instanceof IntegerValue)
													return left < right ? true : false;
												else 
													return false;
						case greater:			if(left instanceof IntegerValue && right instanceof IntegerValue)
													return left > right ? true : false;
												else 
													return false;
						case addition:			if(bc.getRoot()) 
													return false;
												else if(left instanceof IntegerValue && right instanceof IntegerValue){
													return left + right; AS INTEGER VALUE-----------------------------------------------------------------------------
												} else
													return false;
						case multiplication: 	if(bc.getRoot()) 
													return false;
												else if(left instanceof IntegerValue && right instanceof IntegerValue){
													return left * right; AS INTEGER VALUE-----------------------------------------------------------------------------
												} else
													return false;
						case subset:			
						
						}
				}
			}
  		'''
	}
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(typeof(Greeting))
//				.map[name]
//				.join(', '))
	}
}
