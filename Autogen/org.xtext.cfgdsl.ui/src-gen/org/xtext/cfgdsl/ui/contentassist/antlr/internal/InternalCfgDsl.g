/*
* generated by Xtext
*/
grammar InternalCfgDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.cfgdsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.cfgdsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.cfgdsl.services.CfgDslGrammarAccess;

}

@parser::members {
 
 	private CfgDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(CfgDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleRoot
entryRuleRoot 
:
{ before(grammarAccess.getRootRule()); }
	 ruleRoot
{ after(grammarAccess.getRootRule()); } 
	 EOF 
;

// Rule Root
ruleRoot
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRootAccess().getGroup()); }
(rule__Root__Group__0)
{ after(grammarAccess.getRootAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleConfiguration
entryRuleConfiguration 
:
{ before(grammarAccess.getConfigurationRule()); }
	 ruleConfiguration
{ after(grammarAccess.getConfigurationRule()); } 
	 EOF 
;

// Rule Configuration
ruleConfiguration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConfigurationAccess().getGroup()); }
(rule__Configuration__Group__0)
{ after(grammarAccess.getConfigurationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignment
entryRuleAssignment 
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentAccess().getGroup()); }
(rule__Assignment__Group__0)
{ after(grammarAccess.getAssignmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getGroup()); }
(rule__StringValue__Group__0)
{ after(grammarAccess.getStringValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerValue
entryRuleIntegerValue 
:
{ before(grammarAccess.getIntegerValueRule()); }
	 ruleIntegerValue
{ after(grammarAccess.getIntegerValueRule()); } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerValueAccess().getGroup()); }
(rule__IntegerValue__Group__0)
{ after(grammarAccess.getIntegerValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getGroup()); }
(rule__BooleanValue__Group__0)
{ after(grammarAccess.getBooleanValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEBoolean
entryRuleEBoolean 
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
(rule__EBoolean__Alternatives)
{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryConstraint
entryRuleBinaryConstraint 
:
{ before(grammarAccess.getBinaryConstraintRule()); }
	 ruleBinaryConstraint
{ after(grammarAccess.getBinaryConstraintRule()); } 
	 EOF 
;

// Rule BinaryConstraint
ruleBinaryConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryConstraintAccess().getAlternatives()); }
(rule__BinaryConstraint__Alternatives)
{ after(grammarAccess.getBinaryConstraintAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSet
entryRuleSet 
:
{ before(grammarAccess.getSetRule()); }
	 ruleSet
{ after(grammarAccess.getSetRule()); } 
	 EOF 
;

// Rule Set
ruleSet
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSetAccess().getGroup()); }
(rule__Set__Group__0)
{ after(grammarAccess.getSetAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryConstraint
entryRuleUnaryConstraint 
:
{ before(grammarAccess.getUnaryConstraintRule()); }
	 ruleUnaryConstraint
{ after(grammarAccess.getUnaryConstraintRule()); } 
	 EOF 
;

// Rule UnaryConstraint
ruleUnaryConstraint
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryConstraintAccess().getGroup()); }
(rule__UnaryConstraint__Group__0)
{ after(grammarAccess.getUnaryConstraintAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule TypeEnum
ruleTypeEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeEnumAccess().getAlternatives()); }
(rule__TypeEnum__Alternatives)
{ after(grammarAccess.getTypeEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule BinaryOperators
ruleBinaryOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorsAccess().getAlternatives()); }
(rule__BinaryOperators__Alternatives)
{ after(grammarAccess.getBinaryOperatorsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOperators
ruleUnaryOperators
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOperatorsAccess().getNotEnumLiteralDeclaration()); }
(	'not' 
)
{ after(grammarAccess.getUnaryOperatorsAccess().getNotEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getBinaryConstraintParserRuleCall_0()); }
	ruleBinaryConstraint
{ after(grammarAccess.getExpressionAccess().getBinaryConstraintParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getParameterParserRuleCall_1()); }
	ruleParameter
{ after(grammarAccess.getExpressionAccess().getParameterParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSetParserRuleCall_2()); }
	ruleSet
{ after(grammarAccess.getExpressionAccess().getSetParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStringValueParserRuleCall_3()); }
	ruleStringValue
{ after(grammarAccess.getExpressionAccess().getStringValueParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getIntegerValueParserRuleCall_4()); }
	ruleIntegerValue
{ after(grammarAccess.getExpressionAccess().getIntegerValueParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanValueParserRuleCall_5()); }
	ruleBooleanValue
{ after(grammarAccess.getExpressionAccess().getBooleanValueParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getUnaryConstraintParserRuleCall_6()); }
	ruleUnaryConstraint
{ after(grammarAccess.getExpressionAccess().getUnaryConstraintParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getGroup_0()); }
(rule__BinaryConstraint__Group_0__0)
{ after(grammarAccess.getBinaryConstraintAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBinaryConstraintAccess().getGroup_1()); }
(rule__BinaryConstraint__Group_1__0)
{ after(grammarAccess.getBinaryConstraintAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeEnumAccess().getIntegerTypeEnumLiteralDeclaration_0()); }
(	'int' 
)
{ after(grammarAccess.getTypeEnumAccess().getIntegerTypeEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getTypeEnumAccess().getBooleanTypeEnumLiteralDeclaration_1()); }
(	'boolean' 
)
{ after(grammarAccess.getTypeEnumAccess().getBooleanTypeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getTypeEnumAccess().getStringTypeEnumLiteralDeclaration_2()); }
(	'string' 
)
{ after(grammarAccess.getTypeEnumAccess().getStringTypeEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperators__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOperatorsAccess().getLessEnumLiteralDeclaration_0()); }
(	'less' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getLessEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getGreaterEnumLiteralDeclaration_1()); }
(	'greater' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getGreaterEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getEqualEnumLiteralDeclaration_2()); }
(	'equal' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getMultiplicationEnumLiteralDeclaration_3()); }
(	'multiplication' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getMultiplicationEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getAdditionEnumLiteralDeclaration_4()); }
(	'addition' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getAdditionEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getSubsetEnumLiteralDeclaration_5()); }
(	'subset' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getSubsetEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getAndEnumLiteralDeclaration_6()); }
(	'and' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getAndEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getBinaryOperatorsAccess().getOrEnumLiteralDeclaration_7()); }
(	'or' 
)
{ after(grammarAccess.getBinaryOperatorsAccess().getOrEnumLiteralDeclaration_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Root__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__0__Impl
	rule__Root__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getRootAction_0()); }
(

)
{ after(grammarAccess.getRootAccess().getRootAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__1__Impl
	rule__Root__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getConfiguratorsAssignment_1()); }
(rule__Root__ConfiguratorsAssignment_1)*
{ after(grammarAccess.getRootAccess().getConfiguratorsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Root__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Root__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Root__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getExpressionsAssignment_2()); }
(rule__Root__ExpressionsAssignment_2)*
{ after(grammarAccess.getRootAccess().getExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Configuration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__0__Impl
	rule__Configuration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getConfigurationAction_0()); }
(

)
{ after(grammarAccess.getConfigurationAccess().getConfigurationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__1__Impl
	rule__Configuration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getCfgKeyword_1()); }

	'cfg' 

{ after(grammarAccess.getConfigurationAccess().getCfgKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getGroup_2()); }
(rule__Configuration__Group_2__0)?
{ after(grammarAccess.getConfigurationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Configuration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group_2__0__Impl
	rule__Configuration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getAssignmentsAssignment_2_0()); }
(rule__Configuration__AssignmentsAssignment_2_0)
{ after(grammarAccess.getConfigurationAccess().getAssignmentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getGroup_2_1()); }
(rule__Configuration__Group_2_1__0)*
{ after(grammarAccess.getConfigurationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Configuration__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group_2_1__0__Impl
	rule__Configuration__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getConfigurationAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Configuration__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Configuration__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getAssignmentsAssignment_2_1_1()); }
(rule__Configuration__AssignmentsAssignment_2_1_1)
{ after(grammarAccess.getConfigurationAccess().getAssignmentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getAssignKeyword_0()); }

	'assign' 

{ after(grammarAccess.getAssignmentAccess().getAssignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getParameterAssignment_1()); }
(rule__Assignment__ParameterAssignment_1)
{ after(grammarAccess.getAssignmentAccess().getParameterAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getAssignmentAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
(rule__Assignment__ValueAssignment_3)
{ after(grammarAccess.getAssignmentAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParamKeyword_0()); }

	'param' 

{ after(grammarAccess.getParameterAccess().getParamKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StringValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__0__Impl
	rule__StringValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTypeAssignment_0()); }
(rule__StringValue__TypeAssignment_0)
{ after(grammarAccess.getStringValueAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__1__Impl
	rule__StringValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getNameAssignment_1()); }
(rule__StringValue__NameAssignment_1)
{ after(grammarAccess.getStringValueAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__2__Impl
	rule__StringValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getStringValueAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment_3()); }
(rule__StringValue__ValueAssignment_3)
{ after(grammarAccess.getStringValueAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IntegerValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__0__Impl
	rule__IntegerValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTypeAssignment_0()); }
(rule__IntegerValue__TypeAssignment_0)
{ after(grammarAccess.getIntegerValueAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__1__Impl
	rule__IntegerValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getNameAssignment_1()); }
(rule__IntegerValue__NameAssignment_1)
{ after(grammarAccess.getIntegerValueAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__2__Impl
	rule__IntegerValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getIntegerValueAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntegerValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntegerValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueAssignment_3()); }
(rule__IntegerValue__ValueAssignment_3)
{ after(grammarAccess.getIntegerValueAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__BooleanValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanValue__Group__0__Impl
	rule__BooleanValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getTypeAssignment_0()); }
(rule__BooleanValue__TypeAssignment_0)
{ after(grammarAccess.getBooleanValueAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanValue__Group__1__Impl
	rule__BooleanValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getNameAssignment_1()); }
(rule__BooleanValue__NameAssignment_1)
{ after(grammarAccess.getBooleanValueAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanValue__Group__2__Impl
	rule__BooleanValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getBooleanValueAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment_3()); }
(rule__BooleanValue__ValueAssignment_3)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryConstraint__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_0__0__Impl
	rule__BinaryConstraint__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getBcKeyword_0_0()); }

	'bc' 

{ after(grammarAccess.getBinaryConstraintAccess().getBcKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_0__1__Impl
	rule__BinaryConstraint__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getNameAssignment_0_1()); }
(rule__BinaryConstraint__NameAssignment_0_1)
{ after(grammarAccess.getBinaryConstraintAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_0__2__Impl
	rule__BinaryConstraint__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftAssignment_0_2()); }
(rule__BinaryConstraint__LeftAssignment_0_2)
{ after(grammarAccess.getBinaryConstraintAccess().getLeftAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_0__3__Impl
	rule__BinaryConstraint__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_0_3()); }
(rule__BinaryConstraint__OperatorAssignment_0_3)
{ after(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightAssignment_0_4()); }
(rule__BinaryConstraint__RightAssignment_0_4)
{ after(grammarAccess.getBinaryConstraintAccess().getRightAssignment_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__BinaryConstraint__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__0__Impl
	rule__BinaryConstraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getBcKeyword_1_0()); }

	'bc' 

{ after(grammarAccess.getBinaryConstraintAccess().getBcKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__1__Impl
	rule__BinaryConstraint__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRootAssignment_1_1()); }
(rule__BinaryConstraint__RootAssignment_1_1)
{ after(grammarAccess.getBinaryConstraintAccess().getRootAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__2__Impl
	rule__BinaryConstraint__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getNameAssignment_1_2()); }
(rule__BinaryConstraint__NameAssignment_1_2)
{ after(grammarAccess.getBinaryConstraintAccess().getNameAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__3__Impl
	rule__BinaryConstraint__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftAssignment_1_3()); }
(rule__BinaryConstraint__LeftAssignment_1_3)
{ after(grammarAccess.getBinaryConstraintAccess().getLeftAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__4__Impl
	rule__BinaryConstraint__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_1_4()); }
(rule__BinaryConstraint__OperatorAssignment_1_4)
{ after(grammarAccess.getBinaryConstraintAccess().getOperatorAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryConstraint__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryConstraint__Group_1__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightAssignment_1_5()); }
(rule__BinaryConstraint__RightAssignment_1_5)
{ after(grammarAccess.getBinaryConstraintAccess().getRightAssignment_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Set__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__0__Impl
	rule__Set__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getSetKeyword_0()); }

	'set' 

{ after(grammarAccess.getSetAccess().getSetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__1__Impl
	rule__Set__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getNameAssignment_1()); }
(rule__Set__NameAssignment_1)
{ after(grammarAccess.getSetAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getGroup_2()); }
(rule__Set__Group_2__0)?
{ after(grammarAccess.getSetAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Set__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2__0__Impl
	rule__Set__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getLeftSquareBracketKeyword_2_0()); }

	'[' 

{ after(grammarAccess.getSetAccess().getLeftSquareBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2__1__Impl
	rule__Set__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getHasAssignment_2_1()); }
(rule__Set__HasAssignment_2_1)
{ after(grammarAccess.getSetAccess().getHasAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2__2__Impl
	rule__Set__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getGroup_2_2()); }
(rule__Set__Group_2_2__0)*
{ after(grammarAccess.getSetAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getRightSquareBracketKeyword_2_3()); }

	']' 

{ after(grammarAccess.getSetAccess().getRightSquareBracketKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Set__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2_2__0__Impl
	rule__Set__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getSetAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Set__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Set__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Set__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getHasAssignment_2_2_1()); }
(rule__Set__HasAssignment_2_2_1)
{ after(grammarAccess.getSetAccess().getHasAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryConstraint__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryConstraint__Group__0__Impl
	rule__UnaryConstraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getUcKeyword_0()); }

	'uc' 

{ after(grammarAccess.getUnaryConstraintAccess().getUcKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryConstraint__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryConstraint__Group__1__Impl
	rule__UnaryConstraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getNameAssignment_1()); }
(rule__UnaryConstraint__NameAssignment_1)
{ after(grammarAccess.getUnaryConstraintAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryConstraint__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryConstraint__Group__2__Impl
	rule__UnaryConstraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getOperatorAssignment_2()); }
(rule__UnaryConstraint__OperatorAssignment_2)
{ after(grammarAccess.getUnaryConstraintAccess().getOperatorAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryConstraint__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryConstraint__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getExpressionAssignment_3()); }
(rule__UnaryConstraint__ExpressionAssignment_3)
{ after(grammarAccess.getUnaryConstraintAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Root__ConfiguratorsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getConfiguratorsConfigurationParserRuleCall_1_0()); }
	ruleConfiguration{ after(grammarAccess.getRootAccess().getConfiguratorsConfigurationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root__ExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRootAccess().getExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getRootAccess().getExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__AssignmentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getAssignmentsAssignmentParserRuleCall_2_0_0()); }
	ruleAssignment{ after(grammarAccess.getConfigurationAccess().getAssignmentsAssignmentParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Configuration__AssignmentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConfigurationAccess().getAssignmentsAssignmentParserRuleCall_2_1_1_0()); }
	ruleAssignment{ after(grammarAccess.getConfigurationAccess().getAssignmentsAssignmentParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ParameterAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getParameterParameterCrossReference_1_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getParameterParameterEStringParserRuleCall_1_0_1()); }
	ruleEString{ after(grammarAccess.getAssignmentAccess().getParameterParameterEStringParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getParameterParameterCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentAccess().getValueValueCrossReference_3_0()); }
(
{ before(grammarAccess.getAssignmentAccess().getValueValueEStringParserRuleCall_3_0_1()); }
	ruleEString{ after(grammarAccess.getAssignmentAccess().getValueValueEStringParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getAssignmentAccess().getValueValueCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeEnumEnumRuleCall_1_0()); }
	ruleTypeEnum{ after(grammarAccess.getParameterAccess().getTypeTypeEnumEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
	ruleTypeEnum{ after(grammarAccess.getStringValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getStringValueAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_3_0()); }
	ruleEString{ after(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
	ruleTypeEnum{ after(grammarAccess.getIntegerValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getIntegerValueAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerValue__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerValueAccess().getValueEIntParserRuleCall_3_0()); }
	ruleEInt{ after(grammarAccess.getIntegerValueAccess().getValueEIntParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
	ruleTypeEnum{ after(grammarAccess.getBooleanValueAccess().getTypeTypeEnumEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getBooleanValueAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_3_0()); }
	ruleEBoolean{ after(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getNameEStringParserRuleCall_0_1_0()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getNameEStringParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__LeftAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftExpressionCrossReference_0_2_0()); }
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftExpressionEStringParserRuleCall_0_2_0_1()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getLeftExpressionEStringParserRuleCall_0_2_0_1()); }
)
{ after(grammarAccess.getBinaryConstraintAccess().getLeftExpressionCrossReference_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__OperatorAssignment_0_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorsEnumRuleCall_0_3_0()); }
	ruleBinaryOperators{ after(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorsEnumRuleCall_0_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__RightAssignment_0_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightExpressionCrossReference_0_4_0()); }
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightExpressionEStringParserRuleCall_0_4_0_1()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getRightExpressionEStringParserRuleCall_0_4_0_1()); }
)
{ after(grammarAccess.getBinaryConstraintAccess().getRightExpressionCrossReference_0_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__RootAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRootEBooleanParserRuleCall_1_1_0()); }
	ruleEBoolean{ after(grammarAccess.getBinaryConstraintAccess().getRootEBooleanParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__NameAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getNameEStringParserRuleCall_1_2_0()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getNameEStringParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__LeftAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftExpressionCrossReference_1_3_0()); }
(
{ before(grammarAccess.getBinaryConstraintAccess().getLeftExpressionEStringParserRuleCall_1_3_0_1()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getLeftExpressionEStringParserRuleCall_1_3_0_1()); }
)
{ after(grammarAccess.getBinaryConstraintAccess().getLeftExpressionCrossReference_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__OperatorAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorsEnumRuleCall_1_4_0()); }
	ruleBinaryOperators{ after(grammarAccess.getBinaryConstraintAccess().getOperatorBinaryOperatorsEnumRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryConstraint__RightAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightExpressionCrossReference_1_5_0()); }
(
{ before(grammarAccess.getBinaryConstraintAccess().getRightExpressionEStringParserRuleCall_1_5_0_1()); }
	ruleEString{ after(grammarAccess.getBinaryConstraintAccess().getRightExpressionEStringParserRuleCall_1_5_0_1()); }
)
{ after(grammarAccess.getBinaryConstraintAccess().getRightExpressionCrossReference_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getSetAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__HasAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getHasValueCrossReference_2_1_0()); }
(
{ before(grammarAccess.getSetAccess().getHasValueEStringParserRuleCall_2_1_0_1()); }
	ruleEString{ after(grammarAccess.getSetAccess().getHasValueEStringParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getSetAccess().getHasValueCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Set__HasAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSetAccess().getHasValueCrossReference_2_2_1_0()); }
(
{ before(grammarAccess.getSetAccess().getHasValueEStringParserRuleCall_2_2_1_0_1()); }
	ruleEString{ after(grammarAccess.getSetAccess().getHasValueEStringParserRuleCall_2_2_1_0_1()); }
)
{ after(grammarAccess.getSetAccess().getHasValueCrossReference_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getUnaryConstraintAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__OperatorAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getOperatorUnaryOperatorsEnumRuleCall_2_0()); }
	ruleUnaryOperators{ after(grammarAccess.getUnaryConstraintAccess().getOperatorUnaryOperatorsEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryConstraint__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConstraintAccess().getExpressionExpressionCrossReference_3_0()); }
(
{ before(grammarAccess.getUnaryConstraintAccess().getExpressionExpressionEStringParserRuleCall_3_0_1()); }
	ruleEString{ after(grammarAccess.getUnaryConstraintAccess().getExpressionExpressionEStringParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getUnaryConstraintAccess().getExpressionExpressionCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


